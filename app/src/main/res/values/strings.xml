<resources>
    <string name="app_name">eQuations</string>

    <string name="title_section1">Home</string>
    <string name="title_section2">Graph</string>
    <string name="title_section3">Supported Functions</string>
    <string name="title_section4">One Variable</string>
    <string name="title_section5">Equations Systems</string>
    <string name="title_section6">Interpolation</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="action_example">Example action</string>
    <string name="action_settings">Settings</string>
    <string name="request_f">f(x)</string>
    <string name="graph_button">Graph</string>
    <string name="title_activity_bisection">Bisection</string>
    <string name="title_activity_secant">Secant</string>
    <string name="section_format">Hello World from section: %1$d</string>
    <string name="title_activity_scrolling">ScrollingActivity</string>
    <string name="title_activity_tabs">Tabs</string>
    <string name="single_variables_equations">Single Variable Equations</string>
    <string name="equation_system">Equations Systems</string>
    <string name="added_value">Added Value</string>
    <string name="absolute_error">Absolute Error</string>
    <string name="relative_error">Relative Error</string>
    <string name="by">by \n Juan Daniel Arboleda \n Santiago Montoya \n &amp; Sergio Atehortua</string>
    <string name="output">OutPut</string>
    <string name="range_in_x">Domain in x:</string>
    <string name="range_in_y">Range in y:</string>
    <string name="min">Min</string>
    <string name="max">Max</string>
    <string-array name="cabecera_tabla_BIncremental">
        <item>Iteration</item>
        <item>La vendita X</item>
        <item>f(x)</item>
    </string-array>
    <string-array name="cabecera_tabla_Bisection">
        <item>Iteration</item>
        <item>X-inf</item>
        <item>X-sup</item>
        <item>X-med</item>
        <item>f(med)</item>
        <item>Error</item>
    </string-array>
    <string-array name="cabecera_tabla_FixedPoint">
        <item>Iter</item>
        <item>Xn</item>
        <item>f(Xn)</item>
        <item>Error</item>
    </string-array>
    <string-array name="cabecera_tabla_Newton">
        <item>Iter</item>
        <item>Xn</item>
        <item>f(Xn)</item>
        <item>f\'(Xn)</item>
        <item>Error</item>
    </string-array>
    <string-array name="cabecera_tabla_Secant">
        <item>Iter</item>
        <item>Xn</item>
        <item>f(Xn)</item>
        <item>Error</item>
    </string-array>
    <string-array name="cabecera_tabla_multiple_roots">
        <item>Iter</item>
        <item>Xn</item>
        <item>f(Xn)</item>
        <item>f\'(Xn)</item>
        <item>f\'\'(Xn)</item>
        <item>Error</item>
    </string-array>
    <string name="help_bis">
        It\'s a closed method because is convergent and always gets a root, this root is detected
        when there is a sign-change and there is division by two.  For the desired operation of the
        method, it is necesary to evaluate a continue function.  This method finds a root, this
        result is possible after running a given number of iterations that determine the number
        of available divisions for finding a root. The successful result depends on the number
        of iterations , it is possible that after running all iterations the method does not found
        a possible root, when it pass the algorithmic result is empty or fail.
        \n
        \n
        First of all we have to have the equation f(x)= 0 in form then we\'re going to find
        two values such that f(Xa) > 0 y f(Xb) > 0
        \n
        Then we have to get an intermediate value
        \n
        \n Xc = (Xa + Xb) / 2
        \n
        \n next this we have to evaluate the xc value in the function to limit the interval.
        \n
        \n if f(Xc) > 0, then Xb = Xc \n
        if 0 > f(Xc) , then Xa = Xc
        \n
        \n Input data:
        \n
        \n
    -Function: it have to be a continuous function.
    \n -X inf: the minimum value of the interval.
    \n -X max: the maximum value of the interval.
    \n -Tolerance: with this data you specified to the method the maximum error expected.
    \n -Iterations: with this data you specified the maximum number of iteration that the method can
        do so if it\'s not possible to have an interval with a error less than tolerance the result
        will be "failure".
    \n
    \n Possible outputs:
    \n
    \n
    -A root: return the x value where there\'s a root.
    \n -A root with a error: return the approximate x value where is located a root and a tolerance.
    \n -Failure: in case of the algorithm runs the maximum number of iterations and don\'t find
        the root with the tolerance expected is going to return failure.
        \n
        \n
        \n
    </string>
    <string name="help_falposi">
        It\'s a closed method because is convergent and always gets a root, is a merge of
        two methods: bisection and secant, in this method we don\'t take the middle point if
        not that we find a point with the line between the initial point and the final point in
        the intersection with the x axis. The algorithm runs until get a root or an interval with
        a error less than a tolerance given before.
        \n
        \n Input data:
        \n
    \n-Function: it have to be a continuous function.
    -X inf: the minimum value of the interval.
    \n-X max: the maximum value of the interval.
    \n-Tolerance: with this data you specified to the method the maximum error expected.
    \n-Iterations: with this data you specified the maximum number of iteration that the method
        can do so if it\'s not possible to have an interval with a error less than tolerance the
        result will be "failure".
    \n
    \n Possible outputs:
    \n
    \n-A root: return the x value where there\' a root.
    \n-A root with a error: return the approximate x value where is located a root and a tolerance.
    \n-Failure: in case of the algorithm runs the maximum number of iterations and don\'t find the
        root with the tolerance expected is going to return failure.
    \n
    \n
    \n
    </string>
    <string name="help_fixpoint">
        The Fixed Point method is a iterative open method, with this method you could solve
        equation systems, not necessary lineal. It\'s necessary to evaluate a continuous function.
        It can be use to finds a root in a function, as long as, it complies with the convergence
        criteria.
        \n
        \n
        Algoritm:
        \n
        \n
        1-Have a function f(x).
        \n 2-Clears the function f(x) to x = g(x)
        \n 3-Derivate g(x) -> x = g\'(x)
        \n 4-Then, 1 > g\'(x) > -1
        \n
        \n
        Input data:
        \n
        \n
        -Function f: it have to be a continuous function.
        \n -Function g: with f(x)=0, "g" is a function where x is isolated and x = g(x).
        \n -X inf: the initial value.
        \n -Tolerance: with this data you specified to the method the maximum error expected.
        \n -Iterations: with this data you specified the maximum number of iteration that the method
        can do so if it\'s not possible to have an interval with a error less than tolerance the
        result will be "failure".
        \n
        \n
        Possible outputs:
        \n
        \n
        -A root: return the x value where there\'s a root.
        \n -A root with a error: return the approximate x value where is located a root and a
        tolerance.
        \n -Failure: in case of the algorithm runs the maximum number of iterations and don\'t
        find the
        root with the tolerance expected is going to return failure.
        \n
        \n
        \n
    </string>
    <string name="help_searchincre">
        This algorithm is to get an initial interval, a valid interval is detected when there is a
        sign change because like the function is continue and there\'s a sign change we can say that
        there\'s a root between that values. For the desired operation of the method, it\'s necessary
        to evaluate a continue function.
        \n
        This method finds a segment that contain at least a root, this segment is possible after
        running a given number of iterations and a delta for each iterations. The successful result
        depend of the number of iterations, it\'s possible that after running all iterations doesn\'t
        found a possible  root and its respective interval, when it pass the algorithmic result is
        empty or fail.
        \n
        \n
        Input data:
        \n
        \n
        -Function: it have to be a continuous function.
        \n -X inf: a initial value of the interval.
        \n -Delta: the increment of each iteration.
        \n -Iterations: with this data you specified the maximum number of iteration that the
        method can do so if it\'s not possible to have an interval where exists a sing change the
        result will
        be "failure".
        \n
        \n
        Possible outputs:
        \n
        \n
        -A root: return the x value where there\'s a root.
        \n -An interval: return an interval where there\'s a root between the two values.
        \n -Failure: in case of the algorithm runs the maximum number of iterations and don\'t
        find a root or a interval is going to return failure.
        \n
        \n
        \n
    </string>
    <string name="help_secant">
        This method is considered a variant of Newton method, where the secant is more simple
        because this doesn\'t need evaluate the derivative of the function. The user input two
        approaches to the root and evaluate int the function getting a secant line. The point
        is closer to the root with each iteration.
        \n
        \n
        \n
    </string>
    <string name="help_newton">
        Is a variant method of fixed point, this is defined as follows: x(n+1)=x(0)-F(x)/F\'(x).
        This is one of quicker methods for find a root, this just fails when there are multiple
        roots.
        \n
        \n
        \n
    </string>
    <string name="help_multiroot">
        Multiple roots can find a root in a function that has greater multiplicity that one so it has
        more that one root. Some methods can not find roots that being on the axis x because the
        interval where this is has the signs of the function evaluated in the limits with the same
        sign, this is a restriction for another methods.
        \n
        \n
        \n
    </string>
    <string name="help_Gausssianelimination">
        Given an augmented matrix Ab, the purpose of the Gaussian Elimination is to do elementary
        row operations until we get the equivalent system, in which the coefficient matrix is an
        upper triangular matrix.  For that purpose, in the stage k, we calculate the multipliers
        of each row dividing each element of the column k under the element in the diagonal by the
        element of the row k. After that, we change every row under the row k for a new
        row, calculated as
        \n
             New Row (i) = Row (i) – Multiplier(i)(k)*Row (k)
        \n
            Once we get the desired upper triangular matrix, regressive substitution is applied
            to solve the system of equations.
        \n
        \n
        \n
        \n
    </string>
    <string name="help_Cholesky">
        The direct factorization method of Cholesky pretends to decompose a matrix A into the
        product of the two matrices L (lower triangular matrix) and U (upper triangular matrix),
        so that LU = A. For that purpose, we begin with one lower triangular matrix and with one
        upper triangular one where the elements different from zero are unknown, but with the
        particularity that the elements of the diagonals of both matrices have the same values, so
        that L[i][i] = U[i][i]. Then, we use the matrix multiplication concept to find both matrices
        unknown elements. Once we have L and U, progressive and regressive substitution are applied
        to solve the system of equations.
        \n
        \n
        \n
    </string>
    <string name="help_Crout">
        The direct factorization method of Crout pretends to decompose a matrix A into the product
        of the two matrices L (lower triangular matrix) and U (upper triangular matrix), so that
        LU = A. For that purpose, we begin with one lower triangular matrix where the elements
        different from zero are unknown, and with a upper triangular one where the elements
        different from zero are unknown but the elements of the diagonal are one (1), so that
        U[i][i]. Then, we use the matrix multiplication concept to find both matrices unknown
        elements. Once we have L and U, progressive and regressive substitution are applied to solve
        the system of equations.
        \n
        \n
        \n
    </string>
    <string name="help_Doolittle">
        The direct factorization method of Doolittle pretends to decompose a matrix A into the
        product of the two matrices L (lower triangular matrix) and U (upper triangular matrix), so
        that LU = A. For that purpose, we begin with one lower triangular matrix where the elements
        different from zero are unknown but the elements of the diagonal are one (1), so that
        L[i][i], and with a upper triangular one where the elements different from zero are unknown.
        Then, we use the matrix multiplication concept to find both matrices unknown elements.
        Once we have L and U, progressive and regressive substitution are applied to solve the
        system of equations.
        \n
        \n
        \n
    </string>
    <string name="help_GaussSeidel">
        This method is based on the Fixed Point method. That means that with an initial
        approximation of the solution, we can generate other approximations nearer to the real
        values of the variables. The Gauss-Seidel method is an iterative algorithm for determining
        the solutions of a system of linear equations. For the execution of the method, first we
        try to convert the given A matrix to a diagonal dominant one moving its rows and columns.
        Then, we take each equation and put the diagonal variable in terms of the other variables.
        After that, we have to assign initial values to the variables and find the first
        approximation of each one using the cleared equations, but with the particularity that we
        replace the variable values not with the previous iterations ones, but with the current
        calculated ones. We continue replacing the current calculated values in the mentioned
        equations to generate more approximations to the real solution until we reach the permitted
        tolerance. The method stops when the higher value of the dispersion (in absolute value) is
        less than the tolerance. One feature of this method is that in every iteration the new
        approximations are used to calculate the other current ones.
        \n
        Note:
        \n
        Remember that the Alfa value is used to obtain or to improve the system’s convergence.
        For non-relaxation use Alfa = 1; to obtain the convergence of non-convergent systems
        use Alfa  between 0 and  1; and to accelerate the convergence of convergent but slow
        systems use Alfa between 1 and 2
        \n
        \n
        \n
    </string>
    <string name="help_Jacobi">
        This method is based on the Fixed Point method. That means that with an initial
        approximation of the solution, we can generate other approximations nearer to the real
        values of the variables. The Jacobi method is an iterative algorithm for determining the
        solutions of a system of linear equations. For the execution of the method, first we try to
        convert the given A matrix to a diagonal dominant one moving its rows and columns. Then, we
        take each equation and put the diagonal variable in terms of the other variables. After
        that, we have to assign initial values to the variables and find the first approximation of
        each one using the cleared equations. We continue replacing the values of the previous
        iterations in the mentioned equations to generate more approximations to the real solution
        until we reach the permitted tolerance. The method stops when the higher value of the
        dispersion (in absolute value) is less than the tolerance. One feature of this method is
        that it works simultaneously and independently, that means that in every iteration the whole
        new approximations are calculated using only the previous ones.
        \n
        Note:
        \n
        Remember that the Alfa value is used to obtain or to improve the system’s convergence.
        For non-relaxation use Alfa = 1; to obtain the convergence of non-convergent systems
        use Alfa  between 0 and  1; and to accelerate the convergence of convergent but slow
        systems use Alfa between 1 and 2
        \n
        \n
        \n
    </string>
    <string name="help_partial_pivoting">
        The Gaussian Elimination method with partial pivoting is a variant of Gaussian Elimination.
        But with the objective to reduce propagation of error, we try to locate into the diagonal
        all the possible maximum values of each column of the submatrix (excluding the column of
        the independent terms) changing its rows. For that purpose, in the stage k, we have to
        search the higher value (in absolute value) of the column k under the element in the
        diagonal and change the row in which that higher value is located with the row k.
        \n\n\n
    </string>
    <string name="help_scaled_pivoting">
        The Gaussian Elimination method with scaled partial pivoting is a variant of Gaussian
        Elimination with partial pivoting. But with the objective to reduce propagation of error,
        first and only at the beginning of the process, we find and store the maximum value of
        each row (excluding the column of the independent terms).  Then, we try to locate into
        the diagonal all the possible maximum values (in absolute value) between the elements of
        each column divided by the maximum value of its respective row, using the maximum row
        values that we found at the beginning. For that purpose, in the stage k, we have to search
        the higher value (in absolute value), under the element in the diagonal, between the
        elements of the column k divided by its respective maximum row value (found at the
        beginning) and change the row in which that higher value is located with the row k.
        \n\n\n
    </string>
    <string name="help_total_pivoting">
        The Gaussian Elimination method with total pivoting has the same characteristics of
        Gaussian Elimination. But with the objective to reduce propagation of error, we try to
        locate into the diagonal all the possible maximum values of the submatrix (excluding the
        column of the independent terms) changing its rows and/or columns. For that purpose, in
        the stage k, first, we create a marks vector using the numbers from 1 to n for the unknowns.
        Then, we have to search the higher value (in absolute value) of the submatrix formed by
        the rows under the row k and the columns to the right of the column k. Once we find that
        higher value, we have to change the row and/or column in which that higher value is located
        with the row and/or column k to put that element in the diagonal, not forgetting to change
        the marks values when we needed to change columns.
        \n\n\n
    </string>
    <string name="help_neville">
        Given a set of n+1 data points (xi, yi) where no two xi are the same, the interpolating
        polynomial is the polynomial p of degree at most n with the property
        \n
        p(xi) = yi for all i = 0,…,n
        \n
        This polynomial exists and it is unique. Nevilles algorithm evaluates the polynomial at
        some point x.
        \n
        Let pi,j denote the polynomial of degree j − i which goes through the points (xk, yk)
        for k = i, i + 1, …, j. The pi,j satisfy the recurrence relation
        \n\n\n
    </string>
    <string name="help_newton_polinomial">
        This method is used to determine the polynomial that passes through some given points
        (x, f(x)).  The Newton\'s interpolation method uses the concept of divided differences.
        The divided differences allow us to calculate several of the desired polynomial, because
        we use the given points incrementally to obtain an interpolating polynomial of different
        order in each step. The interpolating polynomial would look like:
        \n\n
        P(x) = f[X0] + f[X0, x1](x-X0) + f[X0, X1, X2](x-X0)(x-X1)+…+f[X0, X1, X2, X3,…,
        Xn](x-X0)(x-X1)…(x-Xn-1) \n\n

        , where the k+1 divided difference is an approximation to the derivative of the k divided
        difference evaluated in Xk. So,
        \n\n
        f[Xk, Xk+1] = (f[Xk+1] – f[Xk]) / (Xk+1 – Xk) = (f(Xk+1) – f(Xk)) / (Xk+1 – Xk)
        \n\n\n
    </string>
    <string name="help_lagrange_polynomial">
        This method is used to determine the lowest order polynomial that passes through some given
        points (x, f(x)). The polynomial looks like:
        \n\n
        P(x) = L0(x)f(X0) + L1(x)f(X1) + L2(x)f(X2) + … + Ln(x)f(Xn)
        \n\n
        , where Lk is calculated as the quotient of the polynomial formed by the multiplication of
        the subtractions between x and the x-coordinate of every given point except for the k point,
        and the multiplication of the subtractions between the x-coordinate of the k point and the
        x-coordinates of every given point except for the k point again. So,
        \n\n
        Lk(x) = ((x-X0)(x-X1)…(x-Xk-1)(x-Xk+1)…(x-Xn))/((Xk-X0)(Xk-X1)…(Xk-Xk-1)(Xk-Xk+1)…(Xk-Xn))
        \n\n\n
    </string>
    <string name="help_cubic_splin">
        The most widely used Spline is that generates cubic polynomials between eachsuccessive pair
        of nodes. Is liner most commonly used by its good adjustment to the points and what itscomplexity
        of calculation is not exaggerated.
        The polynomial P (x) through which we construct the Splines have grade 3, so youhave the form:
        \n\n
         P (x) = ax³ + bx² + cx + d
        \n\n\n
    </string>
    <string name="help_lineal_splin">
        Liners are a class of functions that are used in applications requiring data interpolationor
        smooth curves and are used both for one or more dimensions.
        The idea of linear liners is to make possible the construction of spaces of smoothenough
        functions so they are easy to handle, these spaces are generated frompolynomials to pieces
        of low grade.
        \n\n
          The form of polynomials will be P (x) = ax + b.
        \n\n\n
    </string>
<!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="generate">Generate</string>
    <string name="calculate">Carculate</string>
    <string name="matrix_size_hint">Matrix Size</string>
</resources>
